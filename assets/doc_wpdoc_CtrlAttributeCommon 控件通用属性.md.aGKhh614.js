import{_ as r,D as o,c as l,k as d,a as t,I as i,w as h,U as e,o as n}from"./chunks/framework.K-r7inPk.js";const _=JSON.parse('{"title":"CtrlAttributeCommon 控件通用属性","description":"","frontmatter":{"title":"CtrlAttributeCommon 控件通用属性","date":"2020-05-20T15:12:12.000Z"},"headers":[],"relativePath":"doc/wpdoc/CtrlAttributeCommon 控件通用属性.md","filePath":"doc/wpdoc/CtrlAttributeCommon 控件通用属性.md"}'),b={name:"doc/wpdoc/CtrlAttributeCommon 控件通用属性.md"},c=e('<h1 id="ctrl-attribute-common" tabindex="-1">Ctrl Attribute Common <a class="header-anchor" href="#ctrl-attribute-common" aria-label="Permalink to &quot;Ctrl Attribute Common&quot;">​</a></h1><h2 id="通用属性" tabindex="-1">通用属性 <a class="header-anchor" href="#通用属性" aria-label="Permalink to &quot;通用属性&quot;">​</a></h2><p>控件通用属性，所有的控件都会有以下属性</p><blockquote><p>默认值是指终端的默认值，一般在IDE端的默认值都是nil</p></blockquote><h3 id="基础属性" tabindex="-1">基础属性 <a class="header-anchor" href="#基础属性" aria-label="Permalink to &quot;基础属性&quot;">​</a></h3><table><thead><tr><th>属性名称</th><th>说明</th><th>取值类型</th><th>默认值</th><th>flycode</th></tr></thead><tbody><tr><td>type</td><td>控件类型</td><td>enum</td><td>nil</td><td></td></tr><tr><td>code</td><td>控件编码</td><td>string</td><td>&quot;&quot;</td><td></td></tr><tr><td>name</td><td>控件名称，用于flycode</td><td>string</td><td>&quot;&quot;</td><td></td></tr><tr><td>title</td><td>控件标题</td><td>string</td><td>&quot;&quot;</td><td></td></tr><tr><td>hidden</td><td>是否隐藏</td><td>bool</td><td>false</td><td>✅</td></tr><tr><td>eventlist</td><td>事件列表</td><td>array</td><td>nil</td><td></td></tr><tr><td>eventlist.handler</td><td>事件code</td><td>string</td><td>&quot;&quot;</td><td></td></tr><tr><td>eventlist.trigger</td><td>触发时机</td><td>string</td><td>&quot;&quot;</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><blockquote><p>1：bool类型即 “1” 为 true，其他情况都是 false</p><p>2：eventlist 的详细说明请参看 <a href="./CtrlEventTrigger.html">Ctrl Event Trigger</a></p></blockquote><h4 id="title-标题" tabindex="-1">title 标题 <a class="header-anchor" href="#title-标题" aria-label="Permalink to &quot;title 标题&quot;">​</a></h4><p>控件的标题，其显示方式受控件的具体类型和显示模式影响。</p><p>一般的在 basic 模式下所有控件都不显示 title，其他模式下，只有标题型控件需要在控件内部显示标题。</p><p>当控件放置在表格中后，其标题将会固定显示在表格的表头。</p><h3 id="布局属性" tabindex="-1">布局属性 <a class="header-anchor" href="#布局属性" aria-label="Permalink to &quot;布局属性&quot;">​</a></h3><table><thead><tr><th>属性名称</th><th>说明</th><th>取值类型</th><th>默认值</th></tr></thead><tbody><tr><td>flex</td><td>控件弹性比例</td><td>uint</td><td>nil</td></tr><tr><td>flexgrow</td><td>弹性拉伸比例</td><td>uint</td><td>nil</td></tr><tr><td>flexshrink</td><td>弹性收缩比例</td><td>uint</td><td>nil</td></tr><tr><td>alignself</td><td>自身对齐方案</td><td>enum</td><td>stretch</td></tr><tr><td>width</td><td>控件宽度</td><td>uint</td><td>nil</td></tr><tr><td>height</td><td>控件高度</td><td>uint</td><td>nil</td></tr><tr><td>minwidth</td><td>最小宽度</td><td></td><td></td></tr><tr><td>minheight</td><td>最小高度</td><td></td><td></td></tr><tr><td>maxwidth</td><td>最大宽度</td><td></td><td></td></tr><tr><td>maxheight</td><td>最大高度</td><td></td><td></td></tr><tr><td>margin</td><td>四周边距</td><td>int</td><td>nil</td></tr><tr><td>marginleft</td><td>左外边距</td><td>int</td><td>nil</td></tr><tr><td>marginright</td><td>右外边距</td><td>int</td><td>nil</td></tr><tr><td>margintop</td><td>上外边距</td><td>int</td><td>nil</td></tr><tr><td>marginbottom</td><td>下外边距</td><td>int</td><td>nil</td></tr><tr><td>marginvertical</td><td>垂直外边距</td><td>int</td><td>nil</td></tr><tr><td>marginhorizontal</td><td>水平外边距</td><td>int</td><td>nil</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="独立控件属性" tabindex="-1">独立控件属性 <a class="header-anchor" href="#独立控件属性" aria-label="Permalink to &quot;独立控件属性&quot;">​</a></h2><h3 id="独立控件通用属性" tabindex="-1">独立控件通用属性 <a class="header-anchor" href="#独立控件通用属性" aria-label="Permalink to &quot;独立控件通用属性&quot;">​</a></h3><table><thead><tr><th>属性名称</th><th>说明</th><th>取值类型</th><th>默认值</th><th>Flycode</th></tr></thead><tbody><tr><td>value</td><td>控件值</td><td>根据控件类型决定</td><td>根据控件类型决定</td><td>✅</td></tr></tbody></table><h4 id="value-值" tabindex="-1">value 值 <a class="header-anchor" href="#value-值" aria-label="Permalink to &quot;value 值&quot;">​</a></h4><p>控件默认值，通过该属性对控件的默认值进行设定。</p><p>不过有的控件并不支持（或者说不方便）在IDE中直接设置默认值，例如定位控件，拍照控件，附件控件等。</p><h3 id="展示型控件通用属性" tabindex="-1">展示型控件通用属性 <a class="header-anchor" href="#展示型控件通用属性" aria-label="Permalink to &quot;展示型控件通用属性&quot;">​</a></h3><table><thead><tr><th>属性名称</th><th>说明</th><th>取值类型</th><th>默认值</th><th>支持Flycode</th></tr></thead><tbody><tr><td>fontsize</td><td>字体大小</td><td>uint</td><td>14</td><td></td></tr><tr><td>fontweight</td><td>字体粗细</td><td>enum</td><td>normal</td><td></td></tr><tr><td>color</td><td>渲染颜色，主要影响文字和图标的颜色</td><td>color</td><td>black</td><td></td></tr></tbody></table><blockquote><p>目前支持这些属性的控件包括：text，dynamictext，button，icon</p></blockquote><h3 id="color-前景色" tabindex="-1">color 前景色 <a class="header-anchor" href="#color-前景色" aria-label="Permalink to &quot;color 前景色&quot;">​</a></h3><p>不同的控件对前景色影响的显示内容不同，其默认值也有所差异，请参看具体控件内部的定义。</p><p>没有特别说明的，其默认值均为 black</p><h3 id="fontsize-字体大小" tabindex="-1">fontsize 字体大小 <a class="header-anchor" href="#fontsize-字体大小" aria-label="Permalink to &quot;fontsize 字体大小&quot;">​</a></h3><p>指定字体大小，单位pt，默认值如下</p><table><thead><tr><th>控件</th><th>web</th><th>mobile</th></tr></thead><tbody><tr><td>text</td><td>13</td><td>14</td></tr><tr><td>dynamictext</td><td>13</td><td>14</td></tr><tr><td>button</td><td>15</td><td>16</td></tr></tbody></table><h3 id="fontweight-字体粗细" tabindex="-1">fontweight 字体粗细 <a class="header-anchor" href="#fontweight-字体粗细" aria-label="Permalink to &quot;fontweight 字体粗细&quot;">​</a></h3><table><thead><tr><th>值</th><th>说明</th></tr></thead><tbody><tr><td>lighter</td><td>细体</td></tr><tr><td>normal</td><td>常规，默认值</td></tr><tr><td>bold</td><td>粗体</td></tr></tbody></table><h3 id="输入型控件通用属性" tabindex="-1">输入型控件通用属性 <a class="header-anchor" href="#输入型控件通用属性" aria-label="Permalink to &quot;输入型控件通用属性&quot;">​</a></h3><table><thead><tr><th>属性名称</th><th>说明</th><th>取值类型</th><th>默认值</th><th>支持Flycode</th></tr></thead><tbody><tr><td>readonly</td><td>是否只读</td><td>bool</td><td>false</td><td>✅</td></tr><tr><td>mode</td><td>控件显示样式，参看样式说明</td><td></td><td></td><td></td></tr></tbody></table><h4 id="readonly-只读" tabindex="-1">readonly 只读 <a class="header-anchor" href="#readonly-只读" aria-label="Permalink to &quot;readonly 只读&quot;">​</a></h4><p>Bool 类型的值，控制是否允许用户对控件值进行修改，默认值为false</p><p>当值为true时，可能会影响控件的显示，具体的看各个控件的UI设计</p><h4 id="mode-样式" tabindex="-1">mode 样式 <a class="header-anchor" href="#mode-样式" aria-label="Permalink to &quot;mode 样式&quot;">​</a></h4><p>指定控件的显示模式，通常不用手动配置，由上一级的布局控件传递。<br> 显示模式会影响显示的很多细节，例如margin，input area border等，详细可以参看 <a href="./../../Layout/控件样式控制.html">样式说明</a> 。</p><h3 id="标题型控件通用属性" tabindex="-1">标题型控件通用属性 <a class="header-anchor" href="#标题型控件通用属性" aria-label="Permalink to &quot;标题型控件通用属性&quot;">​</a></h3><table><thead><tr><th>属性名称</th><th>说明</th><th>取值类型</th><th>默认值</th><th>支持Flycode</th></tr></thead><tbody><tr><td>title</td><td></td><td></td><td></td><td></td></tr><tr><td>placeholder</td><td>当值为空时显示的占位文字</td><td>string</td><td>请输入</td><td></td></tr><tr><td>required</td><td>是否必填，支持</td><td>bool</td><td>false</td><td>✅</td></tr><tr><td>tips</td><td>提示信息</td><td>string</td><td>nil</td><td></td></tr></tbody></table><h4 id="placeholder-占位文字" tabindex="-1">placeholder 占位文字 <a class="header-anchor" href="#placeholder-占位文字" aria-label="Permalink to &quot;placeholder 占位文字&quot;">​</a></h4><p>应该说绝大部分标题型控件都有该属性，但部分由于其UI的特殊性，该属性不会生效，例如 photo，switch等控件。</p><blockquote><p><strong>属性关联</strong> ：当 readonly == true 时，该属性无效。</p></blockquote><h4 id="required-是否必填" tabindex="-1">required 是否必填 <a class="header-anchor" href="#required-是否必填" aria-label="Permalink to &quot;required 是否必填&quot;">​</a></h4>',43),s=d("code",null,"*",-1),u=e('<p>该属性为true时，会在执行datasubmit事件时触发对应控件的合法性校验。校验不通过，该事件将会执行失败。</p><p>默认的提示信息是“请输入XXX”，XXX就是title的值。</p><p>校验的时机如下：</p><ol><li>当控件初始化完成后，第一次进行输入时，输入过程中不进行校验，直到输入完成（也就是输入框失去焦点后），开始第一次校验。</li><li>在第一次校验之后，用户对该控件的每次输入均需要实时进行校验。</li><li>校验顺序是必填校验-&gt;内置规则校验</li></ol><h4 id="tips-提示信息" tabindex="-1">tips 提示信息 <a class="header-anchor" href="#tips-提示信息" aria-label="Permalink to &quot;tips 提示信息&quot;">​</a></h4><p>对该控件使用的提示，支持一个字符串信息，可以是纯文本，也可以是一段HTML。（目前支持纯文本即可，14pt，0x4c4c4c，left align）</p><p>配置了该属性的控件在控件标题的右边出现一个提示按钮，点击后弹出该提示文本。（实际实现中，移动端可以实现为点击整个标题区域弹出）</p><p>如果该控件是作为表格的列控件嵌入表格时，该提示按钮会出现在对应的表头，而控件自身不再显示该提示按钮。</p><p><img src="http://apaas.wxchina.com:8881/wp-content/uploads/ctrlTips.png" alt=""></p><h3 id="标题型控件通用属性-1" tabindex="-1">标题型控件通用属性 <a class="header-anchor" href="#标题型控件通用属性-1" aria-label="Permalink to &quot;标题型控件通用属性&quot;">​</a></h3><table><thead><tr><th>属性名称</th><th>说明</th><th>取值类型</th><th>默认值</th></tr></thead><tbody><tr><td>titlewidth</td><td>标题的绝对宽度</td><td>uint</td><td>nil</td></tr><tr><td>titleflex</td><td>标题的相对宽度</td><td>float</td><td>0.3</td></tr></tbody></table><blockquote><p>原本这两个属性值适用于左右布局的标题型控件。但是由于很多在移动端使用上下布局的控件，在web端依然是使用左右布局，因此所有的的标题型控件都有这些属性。只不过在移动端显示为上下布局的控件，这两个属性不生效。</p></blockquote><h4 id="titlewidth-标题宽度" tabindex="-1">titlewidth 标题宽度 <a class="header-anchor" href="#titlewidth-标题宽度" aria-label="Permalink to &quot;titlewidth 标题宽度&quot;">​</a></h4><p>通用属性，默认值为0，设置具体的固定标题宽度。</p><p>如果想让标题宽度固定，就需要设置该值，并设置titleflex=0</p><blockquote><p>移动端暂时不实现</p></blockquote><h4 id="titleflex-标题宽度占比" tabindex="-1">titleflex 标题宽度占比 <a class="header-anchor" href="#titleflex-标题宽度占比" aria-label="Permalink to &quot;titleflex 标题宽度占比&quot;">​</a></h4><blockquote><p>废弃，使用 titlewidth 配置百分比来替代</p></blockquote><p>约定标题宽度所占控件区域的比例。计算出的具体宽度值需要向上取整。<br> 空值表示由控件自动决定标题显示宽度；0.0~1.0表示标题宽度占比，例如0.5表示标题和输入框的宽度相同，平分可用区域。<br> 默认值为空，具体的自动调整规则如下</p><ol><li>对于web端，始终使用0.3做为占比。</li><li>对于移动端，控件会使用0.33做为占比。</li></ol><blockquote><p>该属性暂时不实现</p></blockquote><h3 id="选项值控件通用属性" tabindex="-1">选项值控件通用属性 <a class="header-anchor" href="#选项值控件通用属性" aria-label="Permalink to &quot;选项值控件通用属性&quot;">​</a></h3><table><thead><tr><th>属性名称</th><th>说明</th><th>取值类型</th><th>默认值</th></tr></thead><tbody><tr><td>hiddenclearbtn</td><td>是否能清空数据</td><td>bool</td><td>0</td></tr><tr><td>multiselectable</td><td>是否允许多选</td><td>bool</td><td></td></tr><tr><td>options</td><td>控件内置选项</td><td>array</td><td>nil</td></tr><tr><td>options.text</td><td>选项显示值</td><td>string</td><td>nil</td></tr><tr><td>options.key</td><td>选项值</td><td>string</td><td>nil</td></tr><tr><td>options.isselected</td><td>是否默认选中</td><td>bool</td><td>0</td></tr></tbody></table><h4 id="multiselectable-是否允许多选" tabindex="-1">multiselectable 是否允许多选 <a class="header-anchor" href="#multiselectable-是否允许多选" aria-label="Permalink to &quot;multiselectable 是否允许多选&quot;">​</a></h4><p>Bool值，默认为 <code>0</code> 单选，该选项可能会影响控件的UI展现。</p><p>由于用户习惯和UI限制，有的选项值控件也不支持多选，例如 <code>dropdownbox</code></p><h4 id="options-静态选项" tabindex="-1">options 静态选项 <a class="header-anchor" href="#options-静态选项" aria-label="Permalink to &quot;options 静态选项&quot;">​</a></h4><p>大部分的选项值控件（包括级联选项值控件）都可以通过直接配置静态选项值来提供选项。不过类似于 <code>picklist</code> 这类的控件，其设计的初衷就是为了提供当有大量选项时能方便操作的，这类控件就不支持静态选项。</p><p>如果一个控件配置静态选项，又通过外部设置（如datarequest事件）了动态选项，此时会将这两部分选项合并，静态选项出现在最前面。</p><h3 id="级联选项值控件通用属性" tabindex="-1">级联选项值控件通用属性 <a class="header-anchor" href="#级联选项值控件通用属性" aria-label="Permalink to &quot;级联选项值控件通用属性&quot;">​</a></h3><table><thead><tr><th>属性名称</th><th>说明</th><th>取值类型</th><th>默认值</th></tr></thead><tbody><tr><td>intermediateselectmode</td><td>非叶子节点的选择模式</td><td></td><td></td></tr><tr><td>hideroot</td><td>是否隐藏根节点</td><td></td><td></td></tr><tr><td>textstyle</td><td>选中值文本显示风格</td><td></td><td></td></tr><tr><td>options.id</td><td>选项id</td><td>string</td><td>nil</td></tr><tr><td>options.parentid</td><td>选项父节点id</td><td>string</td><td>nil</td></tr></tbody></table><h4 id="intermediateselectmode-非叶子节点选择模式" tabindex="-1">intermediateselectmode 非叶子节点选择模式 <a class="header-anchor" href="#intermediateselectmode-非叶子节点选择模式" aria-label="Permalink to &quot;intermediateselectmode 非叶子节点选择模式&quot;">​</a></h4><p>用于指定非叶子节点的选择模式，默认为 <code>disable</code> ，即不能选择非叶子节点</p><table><thead><tr><th>Value</th><th>Meaning</th></tr></thead><tbody><tr><td>disable</td><td>不能选择中间节点</td></tr><tr><td>shortcut</td><td>中间节点不参与取值，但可以作为叶子节点选择的快捷方式影响叶子节点选择</td></tr><tr><td>individual</td><td>中间节点独立取值，此时选择某个中间节点不会影响其子节点的选择状态</td></tr><tr><td>gather</td><td>中间节点的选择会影响子节点选择，同时与子节点一起参与取值</td></tr><tr><td>related</td><td>中间节点的选择会影响子节点选择，取值时只取分支中的最高的节点值</td></tr></tbody></table><p>从实现角度看</p><table><thead><tr><th>功能点</th><th>disable</th><th>shortcut</th><th>individual</th><th>gather</th><th>related</th></tr></thead><tbody><tr><td>中间节点是否能选择</td><td></td><td>✅</td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>中间节点是否参与取值</td><td></td><td></td><td>✅</td><td>✅</td><td>✅</td></tr><tr><td>父节点选中时子节点是否参与取值</td><td></td><td>✅</td><td>✅</td><td>✅</td><td></td></tr><tr><td>单选时是否有效</td><td>✅</td><td></td><td>✅</td><td></td><td></td></tr></tbody></table><h2 id="容器控件属性" tabindex="-1">容器控件属性 <a class="header-anchor" href="#容器控件属性" aria-label="Permalink to &quot;容器控件属性&quot;">​</a></h2><h3 id="容器-布局控件通用属性" tabindex="-1">容器-布局控件通用属性 <a class="header-anchor" href="#容器-布局控件通用属性" aria-label="Permalink to &quot;容器-布局控件通用属性&quot;">​</a></h3><table><thead><tr><th>属性名称</th><th>说明</th><th>取值类型</th><th>默认值</th></tr></thead><tbody><tr><td>flexdirection</td><td>布局方向</td><td>enum</td><td>vertical</td></tr><tr><td>justifycontent</td><td>主轴方向控件布局规则</td><td>enum</td><td>flexstart</td></tr><tr><td>alignitems</td><td>次轴方向控件布局规则</td><td>enum</td><td>stretch</td></tr><tr><td>flexwrap</td><td>主轴方向自动换行</td><td>bool</td><td>false</td></tr><tr><td>content</td><td>包含的控件列表</td><td>array</td><td>nil</td></tr><tr><td>padding</td><td>四周外边距</td><td>int</td><td>nil</td></tr><tr><td>paddingleft</td><td>左内边距</td><td>int</td><td>nil</td></tr><tr><td>paddingright</td><td>右内边距</td><td>int</td><td>nil</td></tr><tr><td>paddingtop</td><td>上内边距</td><td>int</td><td>nil</td></tr><tr><td>paddingbottom</td><td>下内边距</td><td>int</td><td>nil</td></tr><tr><td>paddingvertical</td><td>垂直内边距</td><td>int</td><td>nil</td></tr><tr><td>paddinghorizontal</td><td>水平内边距</td><td>int</td><td>nil</td></tr><tr><td>bgcolor</td><td>背景颜色</td><td>color</td><td>white</td></tr></tbody></table><h3 id="容器-数组值控件通用属性" tabindex="-1">容器-数组值控件通用属性 <a class="header-anchor" href="#容器-数组值控件通用属性" aria-label="Permalink to &quot;容器-数组值控件通用属性&quot;">​</a></h3><blockquote><p>待总结完善</p></blockquote><table><thead><tr><th>属性名称</th><th>说明</th><th>取值类型</th><th>默认值</th></tr></thead><tbody><tr><td>pageable</td><td>分页大小</td><td>uint</td><td>0</td></tr><tr><td>checkable</td><td>是否可以勾选行</td><td>bool</td><td>false</td></tr><tr><td>isradio</td><td>是否支持单选</td><td>bool</td><td>false</td></tr><tr><td>primarykey</td><td>数据主键</td><td>string</td><td>nil</td></tr></tbody></table><ul><li><p>primarykey</p><p>数据主键用于指定行数据中的某个字段，作为该控件的的主键字段，该字段的值需要保证在该控件中唯一。可用在自动数据缓存，以及数据添加（如片段编辑器添加行）等场景中。</p></li></ul>',43);function p(m,q,f,g,k,x){const a=o("font");return n(),l("div",null,[c,d("p",null,[t("如果是必填，该属性会在控件的title的前方绘制 "),i(a,null,{default:h(()=>[s]),_:1}),t(" ，没有标题时，也会在合适的位置绘制，可以参看textinput控件的UI示例。")]),u])}const P=r(b,[["render",p]]);export{_ as __pageData,P as default};
