import{_ as s,o as n,c as a,Q as e}from"./chunks/framework.d084db19.js";const h=JSON.parse('{"title":"Presenter 表达层","description":"","frontmatter":{"title":"Presenter 表达层","date":"2020-05-19T16:54:01.000Z"},"headers":[],"relativePath":"doc/wpdoc/Presenter 表达层.md","filePath":"doc/wpdoc/Presenter 表达层.md"}'),l={name:"doc/wpdoc/Presenter 表达层.md"},p=e(`<h2 id="presenter-表达层" tabindex="-1">Presenter 表达层 <a class="header-anchor" href="#presenter-表达层" aria-label="Permalink to &quot;Presenter 表达层&quot;">​</a></h2><h2 id="presenter" tabindex="-1">Presenter <a class="header-anchor" href="#presenter" aria-label="Permalink to &quot;Presenter&quot;">​</a></h2><p>Presenter是集中承载表单的逻辑处理的模块，数据请求，表单跳转等表单的行为逻辑都会在此定义。</p><p>由于表单逻辑通常很繁杂，为了更清晰的划分和组织不同的逻辑处理，我们将 Presenter分为四个部分：</p><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">    </span><span style="color:#79B8FF;">&quot;presenter&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;initial&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#FDAEB7;font-style:italic;">......</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;preprocessor&quot;</span><span style="color:#E1E4E8;">: {</span><span style="color:#FDAEB7;font-style:italic;">......</span><span style="color:#E1E4E8;">},</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;interface&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#FDAEB7;font-style:italic;">......</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">        </span><span style="color:#79B8FF;">&quot;handlers&quot;</span><span style="color:#E1E4E8;">: [</span><span style="color:#FDAEB7;font-style:italic;">......</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">    </span><span style="color:#005CC5;">&quot;presenter&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;initial&quot;</span><span style="color:#24292E;">: [</span><span style="color:#B31D28;font-style:italic;">......</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;preprocessor&quot;</span><span style="color:#24292E;">: {</span><span style="color:#B31D28;font-style:italic;">......</span><span style="color:#24292E;">},</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;interface&quot;</span><span style="color:#24292E;">: [</span><span style="color:#B31D28;font-style:italic;">......</span><span style="color:#24292E;">],</span></span>
<span class="line"><span style="color:#24292E;">        </span><span style="color:#005CC5;">&quot;handlers&quot;</span><span style="color:#24292E;">: [</span><span style="color:#B31D28;font-style:italic;">......</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">    }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><ul><li><a href="./Initial.html">Initial 初始化</a></li><li><a href="/Preprocessor.html">Preprocessor 预处理</a></li><li><a href="./Interface.html">Interface 接口</a></li><li><a href="./Handlers.html">Handlers 处理</a></li></ul><p>每个部分其实都是由一个或多个 <a href="./Event.html">Event 事件</a> 组成。</p>`,7),o=[p];function t(r,c,i,E,y,d){return n(),a("div",null,o)}const _=s(l,[["render",t]]);export{h as __pageData,_ as default};
