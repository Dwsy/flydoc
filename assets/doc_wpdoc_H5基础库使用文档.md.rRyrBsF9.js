import{_ as s,c as a,o as i,U as n}from"./chunks/framework.FhXPyWfz.js";const y=JSON.parse('{"title":"H5基础库使用文档","description":"","frontmatter":{"title":"H5基础库使用文档","date":"2022-06-10T03:48:41.000Z"},"headers":[],"relativePath":"doc/wpdoc/H5基础库使用文档.md","filePath":"doc/wpdoc/H5基础库使用文档.md"}'),e={name:"doc/wpdoc/H5基础库使用文档.md"},l=n(`<h2 id="前言" tabindex="-1">前言 <a class="header-anchor" href="#前言" aria-label="Permalink to &quot;前言&quot;">​</a></h2><p>在智慧100产品版本更新迭代中，随着功能增多，其中H5页面的数量页在不断增多，在产品开发和实施交付的过程中，发现原有H5的开发模式在智慧100产品交付体系中存在一些问题，为了提升开发与交付效率，提出了H5基础库开发模式；<br> 在原有H5开发模式中，其优点是可以完全基于web开发体系进行开发和打包，在打包完成后上传至IDE即可，能够 完成所有前端页面能够实现的效果和功能；但在智慧100产品交付体系中，这种开发却有以下几个较大缺点：</p><ol><li>实施无法根据需求对页面进行调整；</li><li>需要产品部门前端进行功能调整开发，增加产品部门开发人员负担，拉长交付时间；</li><li>需要产品部门对改动的项目源码切出单独分支进行维护；</li><li>开发调试效率低下，由于纯前端开发环境缺少flycode环境的支持，一些需要基于flycode数据交互的开发调试需要上传至ide之后，再在app中进行调试，导致每次修改后需要打包上传，然后app清除缓存才能进行调试，这其中将会浪费巨量时间；</li></ol><p>针对以上缺点，H5基础库模式做出了几点优化：</p><ol><li>页面完全基于flycode进行开发，给予实施一定的调整空间，交付过程更加顺畅；</li><li>页面源码完全基于ide进行维护，无需单独git分支；</li><li>开发调试过程中，仅需在flycode中修改，app中刷新表单即可看到效果，开发调试效率提升10倍以上。</li></ol><h2 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h2><ol><li>H5基础库基于Vue 2.x版本创建，实质为一个Vue实例；</li><li>每个页面即为一个vue 组件，通过动态设置组件代码，实现flycode对页面内容的控制；</li><li>Vue.Component方法接收一个对象，所以通过flYcode设置一个对象字符串可以注册一个组件；</li><li>通过动态设置css可以对组件样式进行控制；</li><li>组件加载之后可以通过flycode事件进行交互和操作，完成逻辑闭环。</li></ol><p>其主要执行流程如下：<br><img src="http://apaas.wxchina.com:8881/wp-content/uploads/h5%E5%9F%BA%E7%A1%80%E5%BA%93%E6%B5%81%E7%A8%8B.png" alt="执行流程"></p><h2 id="如何使用" tabindex="-1">如何使用 <a class="header-anchor" href="#如何使用" aria-label="Permalink to &quot;如何使用&quot;">​</a></h2><ol><li>H5基础库必须配合interactiveWebView控件进行使用，interactiveWebView控件使用方式请参见appass文档，H5基础库基于Vuev编写，使用者必须能够掌握vue，会使用jsx更好；</li><li>在interactiveWebView配置项中资源所在目录中指定使用vue资源包<br><img src="http://apaas.wxchina.com:8881/wp-content/uploads/h5%E5%9F%BA%E7%A1%80%E5%BA%93ide.png" alt="ide"></li><li>vue资源包加载完成后会触发interactiveWebView控件的自定义ready事件；</li><li>在ready事件中对调用对应的setCode、setStyle事件，将页面模板和样式设置进容器中即可;</li><li>在模板代码和ide中可以配置对应的事件进行通信和交互。</li></ol><h2 id="api文档" tabindex="-1">API文档 <a class="header-anchor" href="#api文档" aria-label="Permalink to &quot;API文档&quot;">​</a></h2><h3 id="interactivewebview事件key" tabindex="-1">interactiveWebView事件key <a class="header-anchor" href="#interactivewebview事件key" aria-label="Permalink to &quot;interactiveWebView事件key&quot;">​</a></h3><h4 id="ready" tabindex="-1">ready <a class="header-anchor" href="#ready" aria-label="Permalink to &quot;ready&quot;">​</a></h4><p>容器加载成功后触发此事件，只有在ready事件触发之后设置组件和样式才会生效；</p><h3 id="容器事件key" tabindex="-1">容器事件key <a class="header-anchor" href="#容器事件key" aria-label="Permalink to &quot;容器事件key&quot;">​</a></h3><h4 id="setcode" tabindex="-1">setCode <a class="header-anchor" href="#setcode" aria-label="Permalink to &quot;setCode&quot;">​</a></h4><p>通过调用setCode事件可以设置组件内容和逻辑，支持jsx，使用方式如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> code</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">{</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    data () {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    return: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        msg: &#39;hello world&#39;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  },</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  render () {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    retrun (</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">        &lt;div class=&quot;hello&quot;&gt;{this.msg}&lt;/div&gt;</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    )</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  }</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">web.value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: code, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__interactive_key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setCode&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h4 id="setstyle" tabindex="-1">setStyle <a class="header-anchor" href="#setstyle" aria-label="Permalink to &quot;setStyle&quot;">​</a></h4><p>通过setStyle可以设置组件样式，样式支持使用stylus编写，使用方式如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> style</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> \`</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">.hello</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">    color red</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Page.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCtrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(控件名).value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: style, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__interactive_key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;setStyle&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h4 id="openconsole-和-closeconsole" tabindex="-1">openConsole 和 closeConsole <a class="header-anchor" href="#openconsole-和-closeconsole" aria-label="Permalink to &quot;openConsole 和 closeConsole&quot;">​</a></h4><p>打开和关闭vconsole，在开发时可以打开console控制台进行调试。</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//打开console</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Page.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCtrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(控件名).value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__interactive_key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;openConsole&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//关闭console</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Page.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">getCtrl</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(控件名).value </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;__interactive_key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;closeConsole&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="容器事件管理-xpe" tabindex="-1">容器事件管理$xpe <a class="header-anchor" href="#容器事件管理-xpe" aria-label="Permalink to &quot;容器事件管理$xpe&quot;">​</a></h3><p>通过xpe可以让组件进行flycode事件调用和回调事件注册，可以通过<strong>this.$xpe.xxx</strong>在组件模板中使用；</p><h4 id="emit-key-string-data-any" tabindex="-1">emit(key: string, data: any) <a class="header-anchor" href="#emit-key-string-data-any" aria-label="Permalink to &quot;emit(key: string, data: any)&quot;">​</a></h4><p>触发interactiveWebView自定义事件，其中key为自定义事件key，data为传递参数，flycode中可以使用IN获取；</p><h4 id="on-key-string-callback-function-data-any" tabindex="-1">on (key: string, callback: function（data：any）{}) <a class="header-anchor" href="#on-key-string-callback-function-data-any" aria-label="Permalink to &quot;on (key: string, callback: function（data：any）{})&quot;">​</a></h4><p>注册一个事件，当__interactive_key跟key相同时，会触发callback，data为flycode回调时传递的数据；重复注册相同的key会抛错；</p><h4 id="off-key-string" tabindex="-1">off(key: string) <a class="header-anchor" href="#off-key-string" aria-label="Permalink to &quot;off(key: string)&quot;">​</a></h4><p>取消一个回调事件，key事件注册时的key；</p><h4 id="run-key-string-data-any" tabindex="-1">run(key: string, data: any) <a class="header-anchor" href="#run-key-string-data-any" aria-label="Permalink to &quot;run(key: string, data: any)&quot;">​</a></h4><p>执行一个已注册的回调，其中key为注册的事件key, data为传递的参数;</p><h4 id="has-key-string-boolean" tabindex="-1">has(key： string)：boolean <a class="header-anchor" href="#has-key-string-boolean" aria-label="Permalink to &quot;has(key： string)：boolean&quot;">​</a></h4><p>查询事件是否已经注册，如果已经注册返回true，没有返回false;</p><h4 id="clean" tabindex="-1">clean() <a class="header-anchor" href="#clean" aria-label="Permalink to &quot;clean()&quot;">​</a></h4><p>清除所有已注册事件。</p><h4 id="bridge-name-string-params-any-callback-funtion" tabindex="-1">bridge(name: string, [params: any, [callback: funtion]]) <a class="header-anchor" href="#bridge-name-string-params-any-callback-funtion" aria-label="Permalink to &quot;bridge(name: string, \\[params: any, \\[callback: funtion\\]\\])&quot;">​</a></h4><p>调用app注入事件，如getBaserUrl，getUserInfo,需要注意的是，由于安卓和ios实现机制不同，ios端以可以以callback形式传入回调，安卓端需要手动挂载回调函数至window上。<br> 使用示例：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vue 组件代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      list: []</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   mounted</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$xpe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;setListData&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">       this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.list </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">     }</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">     this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.$xpe.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">emit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;getListData&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="全局数据传递与管理-cache" tabindex="-1">全局数据传递与管理$cache <a class="header-anchor" href="#全局数据传递与管理-cache" aria-label="Permalink to &quot;全局数据传递与管理$cache&quot;">​</a></h3><p>在使用组件化开发的时候，经常需要将flycode模板中的一些数据传递至组件内部进行使用，如tenantcode,所以h5基础库提供了<strong>this.$cache</strong>作为全局数据容器，其数据类型为Map,开发者可以通过**this.$cache.set(key, value)**进行数据添加，**this.$cache.get(key)**进行数据获取；</p><h3 id="内置常用库" tabindex="-1">内置常用库 <a class="header-anchor" href="#内置常用库" aria-label="Permalink to &quot;内置常用库&quot;">​</a></h3><h4 id="vant-ui" tabindex="-1">Vant ui <a class="header-anchor" href="#vant-ui" aria-label="Permalink to &quot;Vant ui&quot;">​</a></h4><p>已全局注册Vant ui，可直接使用vant ui相关组件，具体使用方法参见vant 官方文档；</p><h4 id="axios" tabindex="-1">axios <a class="header-anchor" href="#axios" aria-label="Permalink to &quot;axios&quot;">​</a></h4><p>已内置axios请求库，可以通过<strong>this.$http</strong>或者<strong>this.axios</strong>进行使用，详细使用方式参见vue-axios文档或者axios官方文档；</p><h4 id="dayjs" tabindex="-1">dayjs <a class="header-anchor" href="#dayjs" aria-label="Permalink to &quot;dayjs&quot;">​</a></h4><p>已内置日期事件处理库dayjs,可以通过<strong>this.$dayjs</strong>进行使用，详细使用方式参见dayjs官网；</p><h4 id="echarts" tabindex="-1">echarts <a class="header-anchor" href="#echarts" aria-label="Permalink to &quot;echarts&quot;">​</a></h4><p>已内置echarts v5图表库，可通过<strong>this.$echarts</strong>进行使用，详细使用方式参见echarts官网；</p><h3 id="资源加载器-reqiure" tabindex="-1">资源加载器$reqiure <a class="header-anchor" href="#资源加载器-reqiure" aria-label="Permalink to &quot;资源加载器$reqiure&quot;">​</a></h3><p>如果内置的常用库无法满足开发需求，可以通过使用require api加载js资源，使用方式如下：</p><div class="language-js vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载单个资源</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$reqiure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;http://ww.xxx.com/path/xxxx.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 加载完成后执行逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 加载单个资源</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$reqiure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;http://ww.xxx.com/path/a.css&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;http://ww.xxx.com/path/a.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  &#39;http://ww.xxx.com/path/b.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 加载完成后执行逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">})</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h3 id="静态资源加载方式" tabindex="-1">静态资源加载方式 <a class="header-anchor" href="#静态资源加载方式" aria-label="Permalink to &quot;静态资源加载方式&quot;">​</a></h3><ol><li>静态资源可以放在远程服务器上，通过远程域名进行加载；</li><li>静态资源可以以ide资源包的形式上传ide，通过相对路径进行引入，如资源包名称为<strong>static</strong>,则资源路径为**../static/xxx，**js文件也可以以此方式上传并通过this.$require(&#39;../static/xx.js&#39;)进行引入。</li></ol><h3 id="自定义组件使用" tabindex="-1">自定义组件使用 <a class="header-anchor" href="#自定义组件使用" aria-label="Permalink to &quot;自定义组件使用&quot;">​</a></h3><p>当我们需要使用已开发好的vue组件时，可以将组件打包成UMD格式。然后通过this.$reqiure进行加载使用，使用方式如下:</p><div class="language-typescript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// vue组件代码</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () { </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {} },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  create</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$reqiure</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">      &#39;../h5-components/helloword.js&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 如helloword组件放名为h5-components静态资源目录</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]).</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">then</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      this</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$forceUpdate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 组件加载成功后强制更新页面</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    })</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">   render</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> () {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> HelloWord</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> window.helloword </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 注：此处从window中获取的name需跟打包时设置的name一致</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">     return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">HelloWord</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">   }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div>`,60),t=[l];function p(h,r,k,d,c,o){return i(),a("div",null,t)}const g=s(e,[["render",p]]);export{y as __pageData,g as default};
