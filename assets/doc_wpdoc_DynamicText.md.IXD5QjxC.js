import{_ as s,o as a,c as i,R as n}from"./chunks/framework.E9w9IFh5.js";const u=JSON.parse('{"title":"DynamicText","description":"","frontmatter":{"title":"DynamicText","date":"2020-05-20T17:28:04.000Z"},"headers":[],"relativePath":"doc/wpdoc/DynamicText.md","filePath":"doc/wpdoc/DynamicText.md"}'),t={name:"doc/wpdoc/DynamicText.md"},e=n(`<h1 id="dynamictext" tabindex="-1">DynamicText <a class="header-anchor" href="#dynamictext" aria-label="Permalink to &quot;DynamicText&quot;">​</a></h1><p>用于显示需要根据值显示不同的文本，或者图标的情况。</p><h2 id="属性说明" tabindex="-1">属性说明 <a class="header-anchor" href="#属性说明" aria-label="Permalink to &quot;属性说明&quot;">​</a></h2><div class="language-json vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;type&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;dynamictext&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;fontsize&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;14&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;fontweight&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;normal&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;textalign&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;options&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;key&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;text&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;待拜访&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;color&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            &quot;bgcolor&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    ]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><blockquote><p>动态文本也具有和text一样的控制文本样式的属性，如textalign，fontsize，color等等，可以查看text控件，这些属性都是在options里面没有配置相同属性的情况下起效，也就是说优先使用options中的设置，如果options中没有设置，则使用控件的对应属性值。</p></blockquote><h3 id="options-值转换字典" tabindex="-1">options 值转换字典 <a class="header-anchor" href="#options-值转换字典" aria-label="Permalink to &quot;options 值转换字典&quot;">​</a></h3><p>动态文本的值与显示内容的映射关系，已经对应的显示内容的属性。目前只支持在IDE中固定配置</p><h4 id="key-键值" tabindex="-1">key 键值 <a class="header-anchor" href="#key-键值" aria-label="Permalink to &quot;key 键值&quot;">​</a></h4><p>控件值与该属性值相等时，使用该选项的属性绘制控件</p><h4 id="text-文字" tabindex="-1">text 文字 <a class="header-anchor" href="#text-文字" aria-label="Permalink to &quot;text 文字&quot;">​</a></h4><p>显示的文字</p><h4 id="icon-图标" tabindex="-1">icon 图标 <a class="header-anchor" href="#icon-图标" aria-label="Permalink to &quot;icon 图标&quot;">​</a></h4><p>显示的图标，图标的设置规则与 <code>icon</code> 控件的赋值规则一致。</p><blockquote><p>同时有图标的文字的时候，图标在文字的左方，固定5dp的间距。</p></blockquote><h4 id="color-前景色" tabindex="-1">color 前景色 <a class="header-anchor" href="#color-前景色" aria-label="Permalink to &quot;color 前景色&quot;">​</a></h4><p>该选项表现出的前景色，会使用该值对文字或图标进行着色处理</p><h4 id="bgcolor-背景色" tabindex="-1">bgcolor 背景色 <a class="header-anchor" href="#bgcolor-背景色" aria-label="Permalink to &quot;bgcolor 背景色&quot;">​</a></h4><p>该选项表现出的背景色。</p><blockquote><p>如果动态文本本身配置了 color 或者 bgcolor 属性，则当选项的对应颜色属性为空时会使用这些值，也就是说颜色值优先取选项的配置，如果没有配置则使用控件的配置。</p></blockquote><h2 id="配置说明" tabindex="-1">配置说明 <a class="header-anchor" href="#配置说明" aria-label="Permalink to &quot;配置说明&quot;">​</a></h2><p>动态文本不支持根据值动态设置大小，调整布局，因此应该再配置时，给动态文本分配好合适的大小</p>`,21),l=[e];function p(h,o,r,k,c,E){return a(),i("div",null,l)}const b=s(t,[["render",p]]);export{u as __pageData,b as default};
