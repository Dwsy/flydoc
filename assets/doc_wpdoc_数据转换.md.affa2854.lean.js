import{_ as o,C as s,o as r,c as i,k as t,a,H as l,w as d,Q as n}from"./chunks/framework.b1e56e49.js";const A=JSON.parse('{"title":"数据转换","description":"","frontmatter":{"title":"数据转换","date":"2023-07-19T16:38:03.000Z"},"headers":[],"relativePath":"doc/wpdoc/数据转换.md","filePath":"doc/wpdoc/数据转换.md"}'),h={name:"doc/wpdoc/数据转换.md"},p=n("",9),c=t("thead",null,[t("tr",null,[t("th",null,"参数名称"),t("th",null,"参数说明")])],-1),_=t("tr",null,[t("td",null,"List1"),t("td",null,"必填，单选，支持从环境参数中选择一个Item类型为Map的List参数。")],-1),u=t("tr",null,[t("td",null,"主键1"),t("td",null,"必填，单选，支持从List1的属性中选择一个作为合并依据的主键，只能选择number或string类型的属性。当List1的值发生改变后，需要自动更新该值。如果新选择的参数对象中含有相同的属性，则保留原值；否则清空该值。")],-1),m=t("td",null,"List2",-1),L=t("td",null,"主键2",-1),b=t("tr",null,[t("td",null,"合并方式"),t("td",null,"必填，单选，支持“Inner Join”，“Left Join”，“Left Semi Join”，“Left Anti Join”四种合并方式，默认为“Inner join”模式。所有合并方式的对比条件均为：List1.主键1 == List2.主键2。当遇到属性名冲突时，自动在List2的相应属性名后面添加 _2 的后缀名称。")],-1),f=t("tr",null,[t("td",null,"合并方式说明"),t("td",null,"Inner：返回满足对比条件的List1和List2的数据Left：返回List1的全部数据，以及满足条件的List2的数据Left Semi：返回满足对比条件的List1的数据Left Anti：返回不满足对比条件的List1的数据")],-1),S=t("tr",null,[t("td",null,"输出"),t("td",null,"根据选择的参数和合并方式，显示最终的输出数据结构。当list1行、list2行满足条件时，无需选择合并方式，默认执行Inner join，显示最终输出的数据结构。支持自动更新，即在List 1，List 2，合并方式 这三个选项的值发生变化时，自动更新输出结构。")],-1),x=n("",15);function N(g,w,J,M,O,T){const e=s("font");return r(),i("div",null,[p,t("table",null,[c,t("tbody",null,[_,u,t("tr",null,[m,t("td",null,[a("参考"),l(e,null,{default:d(()=>[a("List1")]),_:1})])]),t("tr",null,[L,t("td",null,[a("参考"),l(e,null,{default:d(()=>[a("主键1")]),_:1})])]),b,f,S])]),x])}const E=o(h,[["render",N]]);export{A as __pageData,E as default};
